Ass1
Q3.

#include<stdio.h>
#include<dirent.h>
#include<sys/stat.h>
#include<string.h>
const char* getEx(const char* filename)
{
    const char* dot = strrchr(filename,'.');
    return dot;
}
int main()
{
    struct dirent *entry;
    struct stat file_stat;
    DIR* dir = opendir(".");
    int fCount=0;
    if(dir==NULL)
    printf("Dir Not Opend");

    while((entry = readdir(dir)) !=NULL)
    {
        if(entry->d_type ==DT_DIR) continue;

        stat(entry->d_name,&file_stat);
        printf("%s\t%ld\t%s\n",entry->d_name,file_stat.st_size,getEx(entry->d_name));
        fCount++;
    }
    printf("File Count=%d",fCount);
}
##################################################################################

Q2. 
//open file and sleep for 15sec.

#include<stdio.h>
#include<stdlib.h>
#include<unistd.h>
int main()
{

    FILE* fp= fopen("readDir.c","r");
    char ch;
    if(fp==NULL)
    printf("File Not Opened");
    
    while((ch = fgetc(fp)) !=EOF)
    {
        putchar(ch);
    }
    sleep(15);
}
########################################################################################

Q1. 

#include <fcntl.h>
#include <unistd.h>
#include <stdio.h>

int main() {
    // Open a file for writing (create if it doesn't exist)
    int fd = open("file_with_hole.txt", O_CREAT | O_WRONLY, 0644);
    if (fd < 0) {
        perror("Failed to open file");
        return 1;
    }

    // Write some initial data
    write(fd, "Start", 5);

    // Create a hole by seeking forward
    lseek(fd, 1024, SEEK_CUR); // Skip 1 KB

    // Write more data
    write(fd, "End", 3);

    // Close the file
    close(fd);

    printf("File with a hole created: file_with_hole.txt\n");
    return 0;
}



**********************************************************************************
Ass2

Q1

#include<stdio.h>
#include<stdlib.h>
#include<unistd.h>
#include<semaphore.h>
#include<sys/wait.h>
#include<sys/mman.h>
#include<fcntl.h>

#define SHM_NAME "/bank_shm"
#define SEM_MUTEX_NAME "/bank_sem_mutex"
#define SEM_EMI_NAME "/bank_sem_emi"
#define SEM_WITHDRAW_NAME "/bank_sem_withdraw"
#define SEM_DEPOSIT_NAME "/bank_sem_deposit"

//shared memory structure
typedef struct {
    float balance;
    sem_t mutex;
    sem_t emi;
    sem_t withdraw;
    sem_t deposit;
} BankData;

void deposit_process(BankData* bank_data)
{
    int i=0,dept_balance=0,flag=1;
    printf("Enter Deposit amount\n");
    scanf("%d",&dept_balance);

    for(i=0;i<5;++i)
    {
        sem_wait(&bank_data->mutex);
        if(flag==1)
        {
            bank_data->balance+=dept_balance;
            flag+=1;
            printf("Deposited $%d . New Balance:%.2f\n",dept_balance,bank_data->balance);
        }
        sem_post(&bank_data->mutex);
        sem_post(&bank_data->emi);
        sem_post(&bank_data->withdraw);
        dept_balance=0;
        sleep(3);
    }
    exit(0);
}

void emi_process(BankData* bank_data)
{
    while(1)
    {
        if(bank_data->balance>=50)
        {
            bank_data->balance-=50;
            printf("EMI Paid 50$ Current Balance =%.2f",bank_data->balance);
        }
        else{
            printf("Insufficient Balance\n");
            sem_post(&bank_data->emi);
        }
        sem_post(&bank_data->mutex);
        sleep(1);
    }
}

void withdraw_process(BankData* bank_data)
{
    int withdraw=0;
    while (1)
    {
        sem_wait(&bank_data->mutex);
        sem_wait(&bank_data->withdraw);
        printf("Enter WithDraw Amount:");
        scanf("%d",&withdraw);

        if(bank_data->balance>=withdraw)
        {
            bank_data->balance-=withdraw;
            printf("Withdraw amount is %d:Current Balance:%.2f\n",withdraw,bank_data->balance);
        }
        else{
            printf("Insufficient Balance........\n");
            sem_post(&bank_data->withdraw);
        }
        sem_post(&bank_data->mutex);
        sleep(2);
    }
    
}

int main()
{
    int shm_fd;
    BankData* bank_data;

    shm_fd = shm_open(SHM_NAME,O_CREAT | O_RDWR,0666);
    ftruncate(shm_fd,sizeof(BankData));
    bank_data = mmap(NULL,sizeof(BankData),PROT_READ | PROT_WRITE, MAP_SHARED, shm_fd,0);
    
    bank_data->balance=0;
    sem_init(&bank_data->mutex,1,1);
    sem_init(&bank_data->deposit,1,1);
    sem_init(&bank_data->emi,1,0);
    sem_init(&bank_data->withdraw,1,0);

    munmap(bank_data, sizeof(BankData));
    shm_unlink(SHM_NAME);
    return 0;
}





************************************************************************************************

Ass3

Q1.
#include<stdio.h>
#include<stdlib.h>
#include<unistd.h>
#include<sys/wait.h>
#include<sys/time.h>
#include<sys/resource.h>

void childProcesses(int id){
    printf("Child process %d start\n",id);
    sleep(id);
    printf("Child process %d end\n",id);
    exit(EXIT_SUCCESS);
}
int main()
{
    struct rusage usage;
    struct rusage total_usage={0};
    int n;
    printf("Enter how many processes you wnat to run:");
    scanf("%d",&n);
    
    pid_t pid[n];
    for(int i=0;i<n;i++)
    {
        pid[i]=fork();
        if(pid[i] ==0)
            childProcesses(i+1);
        
    }
    
    for (int i = 0; i < n; i++) {
	
        waitpid(pid[i],NULL,0);
        
        if (getrusage(RUSAGE_CHILDREN, &usage) == 0) {
        total_usage.ru_utime.tv_sec+=usage.ru_utime.tv_sec;
        total_usage.ru_utime.tv_usec+=usage.ru_utime.tv_usec;
        total_usage.ru_stime.tv_sec+=usage.ru_stime.tv_sec;
        total_usage.ru_stime.tv_usec+=usage.ru_stime.tv_usec;
        }
    }
    
    printf("Total user time: %ld.%06ld",(long)total_usage.ru_utime.tv_sec,(long)total_usage.ru_utime.tv_usec);
    printf("\nTotal Kernel time: %ld.%06ld",(long)total_usage.ru_stime.tv_sec,(long)total_usage.ru_stime.tv_usec);
}

##########################################################################################

Q2.
#include<stdio.h>
#include<stdlib.h>
#include<unistd.h>

void atexitFunction(){
	printf("cleanUp 1\n");
}
void second(){
	printf("cleanUp 2\n");
	
}
int main()
{
	atexit(second);
	atexit(atexitFunction);
	printf("MAIN FUNCTION\n");
 
}

####################################################################################

Q3

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>

#define BUFFER_SIZE 100

int main() {
    int pipe1[2]; 
    int pipe2[2];

    pid_t pid;
    char parentMessage[BUFFER_SIZE] = "Msg from parent!";
    char childMessage[BUFFER_SIZE] = "Msg from child!";
    char buffer[BUFFER_SIZE];
    ssize_t bytesRead;

    // Create the pipes
    if (pipe(pipe1) == -1) {
        perror("pipe1");
        exit(EXIT_FAILURE);
    }
    if (pipe(pipe2) == -1) {
        perror("pipe2");
        exit(EXIT_FAILURE);
    }

    pid = fork();
   

    if (pid == 0) { 
        close(pipe1[1]);
        close(pipe2[0]);

        // Read message from parent
        bytesRead = read(pipe1[0], buffer, BUFFER_SIZE);
        if (bytesRead > 0) {
            buffer[bytesRead] = '\0';
            printf("Child received: %s\n", buffer);
        }
        
        // Send message to parent
        write(pipe2[1], childMessage, strlen(childMessage) + 1);

        close(pipe1[0]);
        close(pipe2[1]);
        exit(EXIT_SUCCESS);
    } else { // Parent process
        close(pipe1[0]); 
        close(pipe2[1]); 

        // Send message to child
        write(pipe1[1], parentMessage, strlen(parentMessage) + 1);
        
        // Read message from child
        bytesRead = read(pipe2[0], buffer, BUFFER_SIZE);
        if (bytesRead > 0) {
            buffer[bytesRead] = '\0';
            printf("Parent received: %s\n", buffer);
        }

        close(pipe1[1]);
        close(pipe2[0]);
        wait(NULL); 
    }

    return 0;
}

*************************************************************************************
Ass4

Q1

#include<stdio.h>
#include<string.h>
#include<stdlib.h>
#include<sys/shm.h>
#include<unistd.h>
#define SHM_KEY 1
#define SHM_SIZE 1024
int main()
{

int shm_id = shmget(SHM_KEY,SHM_SIZE,IPC_CREAT | 0666);
char *str;
str= (char*) shmat( shm_id, NULL, 0);

if(shmat <0)
{
printf("Error While Attaching\n");
}

pid_t pid = fork();
	if(pid ==0)
	{
		sleep(1);
	strcpy(str,"hello to Parent\n");
	printf("Msg from parent%s",str);
	}
	else if(pid>0)
	{
		strcpy(str,"hello to child");
		printf("MSg from parent:%s\n",str);
		sleep(1);
	}
}

#########################################################################################


Q2 

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

int main() {
 
        int *ptr = (int *)malloc( sizeof(int));
	*ptr = 0;              
    printf("\nMemory fixed");
        free(ptr);
    
    return 0;
}

###############################################################################

Q.? Memory Leaked

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

int main() {
 
        int *ptr = (int *)malloc(sizeof(int));
	*ptr = 0;    
    printf("\nMemory leaked");
    
    return 0;
}

***********************************************************************************

Ass5

Q1

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <signal.h>
#include <sys/types.h>
#include <sys/wait.h>


void handle_signal(int sig) {
    switch (sig) {
        case SIGHUP:
            printf("Child process received SIGHUP\n");
            break;
        case SIGINT:
            printf("Child process received SIGINT\n");
            break;
        case SIGQUIT:
            printf("Child process received SIGQUIT\n");
            printf("Parent Process has killed child process!!!\n");
            exit(0);
            break;
        default:
            printf("Child process received unknown signal %d\n", sig);
            break;
    }
}

int main() {
    pid_t pid;
    int status,i;
    struct sigaction sa;


    sa.sa_handler = handle_signal;
    sigemptyset(&sa.sa_mask);
    sa.sa_flags = 0;



    if ((pid = fork()) < 0) {
        perror("fork");
        exit(EXIT_FAILURE);
    }

    if (pid == 0) {

        while (1) {
            pause(); 
        }
    } else {
        
        sleep(3);

        for (i = 0; i < 10; ++i) {
            if (i < 10) {
                
                if (i % 2 == 0) {
                    kill(pid, SIGHUP);
                } else { jh=
                    kill(pid, SIGINT);
                }
                sleep(3);
            }
        }


        kill(pid, SIGQUIT);
        waitpid(pid, &status, 0);

        printf("Parent process exiting\n");
        exit(EXIT_SUCCESS);
    }
}

##############################################################################

Q2
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <signal.h>
#include <sys/types.h>
#include <sys/wait.h>

void child_process()
{
	while(1)
	{
	printf("\nPROCESS RUNNING >>");
	fflush(stdout);
	sleep(2);
	}
}


int main() {
    	pid_t pid;
    	int i;
    	char input ;
    	pid = fork();
	
    	if(pid == 0) 
   	{
   	 child_process();
	}
	else
	{
	
		while(1)
		{
			
			
			printf("Enter s r q\n");
			scanf(" %c" , &input);
			
			
			if(input == 's')
			{
				kill(pid , SIGSTOP);
			}
			else if(input =='r')
			{
				kill(pid , SIGCONT);
			}
			else if(input == 'q')
			{
				kill(pid , SIGTERM);
				wait(NULL);
				break;
			}
			else
			{
				printf("INVALID INPUT\n ");
				
			}
			
		}
	}
	return 0;
}

######################################################################################

Q? signal

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <signal.h>
#include <sys/types.h>
#include <sys/wait.h>


pid_t child_pid;


void sigint_handler(int sig) 
{
    printf("\nReceived SIGINT. Stopping child process...\n");
    kill(child_pid, SIGSTOP);
}

void sigterm_handler(int sig) 
{
    printf("\nReceived SIGTERM. Terminating child process...\n");
    kill(child_pid, SIGTERM);
    wait(NULL);
    exit(0);
}

void child_process() 
{
    while (1) 
    {
        printf("\nPROCESS RUNNING >>");
        fflush(stdout);
        sleep(2);
    }
}

int main() 
{

    signal(SIGINT, sigint_handler);
    signal(SIGTERM, sigterm_handler);

    child_pid = fork();

    if (child_pid < 0) 
    {
        perror("fork failed");
        exit(EXIT_FAILURE);
    }

    if (child_pid == 0) 
    {
        child_process();
    } 
    else 
    {
        while (1) 
        {
            printf("Enter 'r' to resume or 'q' to quit: ");
            char input;
            scanf(" %c", &input);

            if (input == 'r') 
            {
                kill(child_pid, SIGCONT);
            } else if (input == 'q') {
                kill(child_pid, SIGTERM);
                wait(NULL);
                break;
            } 
            else 
            {
                printf("INVALID INPUT\n");
            }
        }
    }

    return 0;
}

#########################################################################################